"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeTagFromCommentsOf = exports.tryGetOriginalReflectionName = void 0;
/**
 * Tries to determine the original name of a reflection.
 * @param context The TypeDoc context.
 * @param reflection The reflection whose original name is wanted.
 * @returns The original name of the reflection or undefined if it could not be determined.
 */
function tryGetOriginalReflectionName(context, reflection) {
    const symbol = context.project.getSymbolFromReflection(reflection);
    if (symbol) {
        if (symbol.name && symbol.name !== "default") {
            return symbol.name;
        }
        else if (symbol.declarations) {
            const declaration = symbol.declarations[0];
            if (declaration && declaration.name && declaration.name.getText) {
                const declarationName = declaration.name.getText();
                if (typeof declarationName === "string") {
                    return declarationName;
                }
            }
        }
    }
    return undefined;
}
exports.tryGetOriginalReflectionName = tryGetOriginalReflectionName;
/**
 * Removes a possible tag from the comments of the given reflection.
 * @param reflection The reflection from which the tag should be removed.
 * @param tagToRemove Name of the tag to be removed.
 */
function removeTagFromCommentsOf(reflection, tagToRemove) {
    var _a, _b, _c;
    const tagIndex = (_b = (_a = reflection.comment) === null || _a === void 0 ? void 0 : _a.blockTags.findIndex((ct) => ct.tag === tagToRemove)) !== null && _b !== void 0 ? _b : -1;
    if (tagIndex !== -1) {
        (_c = reflection.comment) === null || _c === void 0 ? void 0 : _c.blockTags.splice(tagIndex, 1);
    }
}
exports.removeTagFromCommentsOf = removeTagFromCommentsOf;
